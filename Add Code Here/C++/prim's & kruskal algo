Prim's and Kruskal's Algo in C++

 basic implementation of Prim's algorithm in C++:

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int INF = 1e9;

// Define a structure to represent an edge
struct Edge {
    int to, weight;
    Edge(int _to, int _weight) : to(_to), weight(_weight) {}
};

// Function to find the minimum spanning tree using Prim's algorithm
void primMST(vector<vector<Edge>>& graph, int V) {
    vector<int> parent(V, -1);  // Store the parent of each vertex in the MST
    vector<int> key(V, INF);    // Store the minimum key value to each vertex
    vector<bool> inMST(V, false);  // Whether a vertex is included in MST

    // Priority queue to choose the minimum key vertex
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    // Start with the first vertex (can choose any vertex as a starting point)
    int startVertex = 0;
    key[startVertex] = 0;
    pq.push({0, startVertex});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        inMST[u] = true;

        // Explore all adjacent vertices of u
        for (Edge& edge : graph[u]) {
            int v = edge.to;
            int weight = edge.weight;

            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                parent[v] = u;
                pq.push({key[v], v});
            }
        }
    }

    // Print the MST edges and their weights
    for (int i = 1; i < V; ++i) {
        cout << "Edge: " << parent[i] << " - " << i << " Weight: " << key[i] << endl;
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    vector<vector<Edge>> graph(V);

    cout << "Enter the edges in the format (from, to, weight):" << endl;
    for (int i = 0; i < E; ++i) {
        int from, to, weight;
        cin >> from >> to >> weight;
        graph[from].emplace_back(to, weight);
        graph[to].emplace_back(from, weight); // For undirected graph
    }

    primMST(graph, V);

    return 0;
}



 basic implementation of Kruskal's algorithm in C++:


 #include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Define a structure to represent an edge
struct Edge {
    int from, to, weight;
    Edge(int _from, int _to, int _weight) : from(_from), to(_to), weight(_weight) {}
};

bool compareEdges(const Edge& a, const Edge& b) {
    return a.weight < b.weight;
}

int find(vector<int>& parent, int vertex) {
    if (parent[vertex] == -1)
        return vertex;
    return find(parent, parent[vertex]);
}

void unionVertices(vector<int>& parent, int x, int y) {
    int rootX = find(parent, x);
    int rootY = find(parent, y);
    parent[rootX] = rootY;
}

void kruskalMST(vector<Edge>& edges, int V) {
    vector<Edge> minimumSpanningTree;
    vector<int> parent(V, -1);

    sort(edges.begin(), edges.end(), compareEdges);

    for (Edge& edge : edges) {
        int rootX = find(parent, edge.from);
        int rootY = find(parent, edge.to);

        if (rootX != rootY) {
            minimumSpanningTree.push_back(edge);
            unionVertices(parent, rootX, rootY);
        }
    }

    // Print the MST edges and their weights
    for (Edge& edge : minimumSpanningTree) {
        cout << "Edge: " << edge.from << " - " << edge.to << " Weight: " << edge.weight << endl;
    }
}

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    vector<Edge> edges;

    cout << "Enter the edges in the format (from, to, weight):" << endl;
    for (int i = 0; i < E; ++i) {
        int from, to, weight;
        cin >> from >> to >> weight;
        edges.emplace_back(from, to, weight);
    }

    kruskalMST(edges, V);

    return 0;
}

